name: Azure P2S VPN Connection Setup

on:
  workflow_dispatch:
    inputs:
      azure_subscription_id:
        description: 'Azure Subscription ID'
        required: true
        type: string
      resource_group:
        description: 'Resource Group containing the VPN Gateway'
        required: true
        type: string
      vpn_gateway_name:
        description: 'Virtual Network Gateway Name'
        required: true
        type: string
      client_certificate_name:
        description: 'P2S Client Certificate Name (optional)'
        required: false
        type: string
        default: 'P2SClientCert'
      test_connection:
        description: 'Test VPN connection after setup'
        required: false
        type: boolean
        default: false
      private_app_service_url:
        description: 'Private App Service URL to test connectivity (e.g., https://myapp.azurewebsites.net)'
        required: false
        type: string
      vpn_connection_timeout:
        description: 'VPN connection timeout in seconds'
        required: false
        type: number
        default: 30

env:
  AZURE_SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
  RESOURCE_GROUP: ${{ inputs.resource_group }}
  VPN_GATEWAY_NAME: ${{ inputs.vpn_gateway_name }}
  CLIENT_CERT_NAME: ${{ inputs.client_certificate_name }}
  PRIVATE_APP_SERVICE_URL: ${{ inputs.private_app_service_url }}
  VPN_CONNECTION_TIMEOUT: ${{ inputs.vpn_connection_timeout }}

jobs:
  setup-p2s-vpn:
    runs-on: macos-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install OpenVPN
      run: |
        echo "Installing OpenVPN via Homebrew..."
        brew update
        brew install openvpn
        
        # Verify installation
        openvpn --version

    - name: Install Azure CLI
      run: |
        echo "Installing Azure CLI..."
        brew update
        brew install azure-cli
        
        # Verify installation
        az version

    - name: Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Set Azure Subscription
      run: |
        az account set --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}
        az account show

    - name: Download P2S VPN Client Configuration
      id: vpn-config
      run: |
        echo "Downloading P2S VPN client configuration from Azure Storage..."
        
        # Download VPN client configuration package from Azure Storage Account
        echo "Downloading VNet-Gateway.zip from Azure Storage Account 'vpnpackageworkflowcenter'..."
        az storage blob download \
          --account-name vpnpackageworkflowcenter \
          --container-name vpn \
          --name VNet-Gateway.zip \
          --file vpn-client-config.zip \
          --auth-mode login
        
        echo "VPN Client configuration downloaded successfully"
        
        # Extract the configuration
        echo "Extracting VPN client configuration package..."
        echo "Original zip file info:"
        ls -la vpn-client-config.zip
        file vpn-client-config.zip
        
        # Use ditto as a fallback if unzip fails due to Windows paths
        if ! unzip -q vpn-client-config.zip; then
          echo "unzip failed, retrying with ditto..."
          ditto -x -k vpn-client-config.zip .
        fi
        
        echo "=== Post-extraction directory listing ==="
        ls -la
        echo ""
        
        # Check for potential issues with the zip file extraction
        if [ -d "OpenVPN" ]; then
          echo "OpenVPN directory contents:"
          ls -la OpenVPN/
          echo ""
          
          if [ -f "OpenVPN/vpnconfig.ovpn" ]; then
            echo "Initial vpnconfig.ovpn check:"
            echo "Size: $(wc -c < OpenVPN/vpnconfig.ovpn) bytes"
            echo "Lines: $(wc -l < OpenVPN/vpnconfig.ovpn)"
            echo "First few bytes (hex): $(head -c 100 OpenVPN/vpnconfig.ovpn | xxd -l 100)"
            echo ""
          fi
        fi
        
        # Check if extraction seems incomplete
        TOTAL_FILES=$(find . -type f | wc -l)
        echo "Total files extracted: $TOTAL_FILES"
        if [ "$TOTAL_FILES" -lt 3 ]; then
          echo "⚠️ Seems like very few files were extracted, checking for extraction issues..."
        fi

    - name: Setup Certificate Replacement Script
      run: |
        echo "Creating certificate placeholder replacement script..."
        cat << 'EOF' > replace_cert_placeholders.py
        #!/usr/bin/env python3
        """
        Azure OpenVPN Certificate Placeholder Replacement Script

        This script replaces the $CLIENTCERTIFICATE and $PRIVATEKEY placeholders
        in Azure-generated OpenVPN configuration files with actual certificate content.

        Usage:
            python3 replace_cert_placeholders.py <config_file> <cert_file> <key_file>

        Arguments:
            config_file: Path to the OpenVPN configuration file with placeholders
            cert_file: Path to the client certificate file
            key_file: Path to the client private key file
        """

        import sys
        import os


        def replace_placeholders(config_path, cert_path, key_path):
            """
            Replace certificate placeholders in OpenVPN config with actual content.
            
            Args:
                config_path (str): Path to the OpenVPN configuration file
                cert_path (str): Path to the client certificate file
                key_path (str): Path to the client private key file
            
            Returns:
                bool: True if successful, False otherwise
            """
            try:
                # Validate input files exist
                if not os.path.exists(config_path):
                    print(f"Error: Config file not found: {config_path}")
                    return False
                
                if not os.path.exists(cert_path):
                    print(f"Error: Certificate file not found: {cert_path}")
                    return False
                
                if not os.path.exists(key_path):
                    print(f"Error: Private key file not found: {key_path}")
                    return False
                
                # Read the config file
                print(f"Reading configuration file: {config_path}")
                with open(config_path, 'r') as f:
                    content = f.read()
                
                # Check if placeholders exist
                has_cert_placeholder = '$CLIENTCERTIFICATE' in content
                has_key_placeholder = '$PRIVATEKEY' in content
                
                if not has_cert_placeholder and not has_key_placeholder:
                    print("No certificate placeholders found in config file")
                    return True
                
                print(f"Found placeholders - Certificate: {has_cert_placeholder}, Key: {has_key_placeholder}")
                
                # Read certificate content
                print(f"Reading certificate file: {cert_path}")
                with open(cert_path, 'r') as f:
                    cert_content = f.read().strip()
                
                # Read private key content
                print(f"Reading private key file: {key_path}")
                with open(key_path, 'r') as f:
                    key_content = f.read().strip()
                
                # Validate certificate content
                if not cert_content.startswith('-----BEGIN CERTIFICATE-----'):
                    print("Warning: Certificate file may not be in PEM format")
                
                if not key_content.startswith('-----BEGIN PRIVATE KEY-----') and not key_content.startswith('-----BEGIN RSA PRIVATE KEY-----'):
                    print("Warning: Private key file may not be in PEM format")
                
                # Replace placeholders
                original_content = content
                if has_cert_placeholder:
                    content = content.replace('$CLIENTCERTIFICATE', cert_content)
                    print("Replaced $CLIENTCERTIFICATE placeholder")
                
                if has_key_placeholder:
                    content = content.replace('$PRIVATEKEY', key_content)
                    print("Replaced $PRIVATEKEY placeholder")
                
                # Verify replacements were made
                if content == original_content:
                    print("Warning: No replacements were made")
                    return False
                
                # Write back to config file
                print(f"Writing updated configuration to: {config_path}")
                with open(config_path, 'w') as f:
                    f.write(content)
                
                print("Certificate placeholders successfully replaced")
                return True
                
            except Exception as e:
                print(f"Error replacing certificate placeholders: {e}")
                return False


        def main():
            """Main function to handle command line arguments and execute replacement."""
            if len(sys.argv) != 4:
                print("Usage: python3 replace_cert_placeholders.py <config_file> <cert_file> <key_file>")
                print()
                print("Arguments:")
                print("  config_file: Path to the OpenVPN configuration file with placeholders")
                print("  cert_file: Path to the client certificate file")
                print("  key_file: Path to the client private key file")
                sys.exit(1)
            
            config_file = sys.argv[1]
            cert_file = sys.argv[2]
            key_file = sys.argv[3]
            
            print("Azure OpenVPN Certificate Placeholder Replacement")
            print("=" * 50)
            print(f"Config file: {config_file}")
            print(f"Certificate file: {cert_file}")
            print(f"Private key file: {key_file}")
            print()
            
            success = replace_placeholders(config_file, cert_file, key_file)
            
            if success:
                print("\n✅ Placeholder replacement completed successfully")
                sys.exit(0)
            else:
                print("\n❌ Placeholder replacement failed")
                sys.exit(1)


        if __name__ == "__main__":
            main()
        EOF
        
        chmod +x replace_cert_placeholders.py
        echo "Certificate replacement script created and made executable"

    - name: Setup Client Certificates
      id: client-certs
      run: |
        echo "Setting up client certificates..."
        
        # Create certificates directory
        mkdir -p $HOME/vpn-certs
        
        # Check if client certificate is provided as secret
        if [ -n "${{ secrets.P2S_CLIENT_CERT }}" ] && [ -n "${{ secrets.P2S_CLIENT_KEY }}" ]; then
          echo "Using provided client certificate from secrets..."
          echo "${{ secrets.P2S_CLIENT_CERT }}" > $HOME/vpn-certs/client.crt
          echo "${{ secrets.P2S_CLIENT_KEY }}" > $HOME/vpn-certs/client.key
          
          # Set proper permissions
          chmod 600 $HOME/vpn-certs/client.key
          chmod 644 $HOME/vpn-certs/client.crt
          
          echo "client_cert_path=$HOME/vpn-certs/client.crt" >> $GITHUB_OUTPUT
          echo "client_key_path=$HOME/vpn-certs/client.key" >> $GITHUB_OUTPUT
        else
          echo "No client certificate provided in secrets. You may need to configure certificate authentication."
          echo "Please ensure P2S_CLIENT_CERT and P2S_CLIENT_KEY secrets are set if using certificate authentication."
        fi

    - name: Configure OpenVPN Client
      run: |
        echo "Configuring OpenVPN client..."
        
        # Debug: List all extracted files
        echo "Files extracted from VPN package:"
        find . -type f -name "*.ovpn" -o -name "*.xml" -o -name "*.crt" | sort
        
        # Use the existing vpnconfig.ovpn file from the downloaded package
        if [ -f "OpenVPN/vpnconfig.ovpn" ]; then
          echo "Found existing vpnconfig.ovpn, analyzing it..."
          echo "File size: $(wc -c < OpenVPN/vpnconfig.ovpn) bytes"
          echo "Line count: $(wc -l < OpenVPN/vpnconfig.ovpn) lines"
          echo "First 10 lines of original vpnconfig.ovpn:"
          head -10 "OpenVPN/vpnconfig.ovpn"
          echo "Last 10 lines of original vpnconfig.ovpn:"
          tail -10 "OpenVPN/vpnconfig.ovpn"
          
          # Check if file is complete (should have more than just client directive)
          # Count non-comment, non-empty lines
          CONTENT_LINES=$(grep -v '^#' "OpenVPN/vpnconfig.ovpn" | grep -v '^$' | wc -l)
          echo "Non-comment, non-empty lines: $CONTENT_LINES"
          
          # Also check for essential OpenVPN directives
          HAS_REMOTE=$(grep -c '^remote ' "OpenVPN/vpnconfig.ovpn" || echo "0")
          HAS_DEV=$(grep -c '^dev ' "OpenVPN/vpnconfig.ovpn" || echo "0")
          HAS_PROTO=$(grep -c '^proto ' "OpenVPN/vpnconfig.ovpn" || echo "0")
          
          echo "Essential directives found - remote: $HAS_REMOTE, dev: $HAS_DEV, proto: $HAS_PROTO"
          
          if [ "$CONTENT_LINES" -lt 5 ] || [ "$HAS_REMOTE" -eq 0 ] || [ "$HAS_DEV" -eq 0 ]; then
            echo "❌ vpnconfig.ovpn appears to be incomplete:"
            echo "  - Content lines: $CONTENT_LINES (need at least 5)"
            echo "  - Has 'remote' directive: $HAS_REMOTE (need 1)"
            echo "  - Has 'dev' directive: $HAS_DEV (need 1)"
            echo "Full file contents:"
            cat "OpenVPN/vpnconfig.ovpn"
            echo "=== End of incomplete file ==="
            echo "Falling back to XML-based configuration..."
            USE_XML_FALLBACK=true
          else
            echo "✅ vpnconfig.ovpn appears to be complete, using it as base configuration..."
            cp "OpenVPN/vpnconfig.ovpn" ~/vpn-client.ovpn
            USE_XML_FALLBACK=false
            
            # Check if this is an Azure-style config with embedded certificates and placeholders
            if grep -q '<cert>' ~/vpn-client.ovpn && grep -q '\$CLIENTCERTIFICATE' ~/vpn-client.ovpn; then
              echo "Detected Azure-style configuration with embedded certificate placeholders"
              AZURE_STYLE_CONFIG=true
            else
              echo "Standard OpenVPN configuration detected"
              AZURE_STYLE_CONFIG=false
              
              # Copy CA certificate if available for standard configs
              if [ -f "OpenVPN/ca.crt" ]; then
                echo "Copying CA certificate..."
                cp OpenVPN/ca.crt ~/ca.crt
              else
                echo "⚠️ CA certificate not found in OpenVPN directory"
              fi
            fi
          fi
          
        elif [ -f "OpenVPN/VpnSettings.xml" ] || [ "$USE_XML_FALLBACK" = "true" ]; then
          if [ "$USE_XML_FALLBACK" = "true" ]; then
            echo "Using XML fallback due to incomplete vpnconfig.ovpn..."
          else
            echo "No vpnconfig.ovpn found, but found VpnSettings.xml, extracting configuration..."
          fi
          
          # Extract server information from VpnSettings.xml
          echo "Parsing VpnSettings.xml..."
          echo "=== VpnSettings.xml content ==="
          cat "OpenVPN/VpnSettings.xml"
          echo "=== End of VpnSettings.xml ==="
          
          # Try multiple patterns to extract server information
          SERVER=$(grep -o '<VpnServer>[^<]*</VpnServer>' OpenVPN/VpnSettings.xml | sed 's/<[^>]*>//g' | head -1)
          if [ -z "$SERVER" ]; then
            # Try alternative patterns
            SERVER=$(grep -o '<vpnserver>[^<]*</vpnserver>' OpenVPN/VpnSettings.xml | sed 's/<[^>]*>//g' | head -1)
          fi
          if [ -z "$SERVER" ]; then
            # Try to find any server-like entry
            SERVER=$(grep -o 'server[^>]*>[^<]*<' OpenVPN/VpnSettings.xml | sed 's/.*>//;s/<.*//' | head -1)
          fi
          
          echo "Extracted VPN Server: '$SERVER'"
          
          if [ -z "$SERVER" ]; then
            echo "❌ Could not extract VPN server from VpnSettings.xml"
            echo "Available XML content patterns:"
            grep -i server OpenVPN/VpnSettings.xml || echo "No server entries found"
            exit 1
          fi
          
          # Extract port if available, default to 1194
          PORT=$(grep -o '<VpnPort>[^<]*</VpnPort>' OpenVPN/VpnSettings.xml | sed 's/<[^>]*>//g' | head -1)
          if [ -z "$PORT" ]; then
            PORT="1194"
          fi
          echo "Using port: $PORT"
          
          # Create OpenVPN configuration file as fallback using template
          if [ -f "openvpn-template.conf" ]; then
            echo "Using OpenVPN template file..."
            cp openvpn-template.conf ~/vpn-client.ovpn
            
            # Replace placeholders with actual values
            sed -i '' "s/SERVER_PLACEHOLDER/$SERVER/g" ~/vpn-client.ovpn
            sed -i '' "s/PORT_PLACEHOLDER/$PORT/g" ~/vpn-client.ovpn
          else
            echo "Creating OpenVPN configuration manually..."
            {
              echo "client"
              echo "dev tun" 
              echo "proto udp"
              echo "remote $SERVER $PORT"
              echo "resolv-retry infinite"
              echo "nobind"
              echo "persist-key"
              echo "persist-tun"
              echo "ca ca.crt"
              echo "verb 3"
              echo "auth-user-pass"
              echo "route-method exe"
              echo "route-delay 2"
              echo "tls-version-min 1.2"
              echo "cipher AES-256-GCM"
              echo "auth SHA256"
            } > ~/vpn-client.ovpn
          fi
          
          echo "Created OpenVPN configuration from XML"
          
          # Copy CA certificate if available
          if [ -f "OpenVPN/ca.crt" ]; then
            cp OpenVPN/ca.crt ~/ca.crt
          fi
          
        elif [ -f "Generic/VpnSettings.xml" ]; then
          echo "Found Generic VPN settings..."
          echo "Generic VpnSettings.xml content:"
          cat "Generic/VpnSettings.xml"
          # Handle generic configuration - this might need custom parsing
          echo "❌ Generic configuration not yet implemented"
          exit 1
        else
          echo "❌ No recognized VPN configuration found in the package"
          echo "Available directories and files:"
          ls -la
          ls -la OpenVPN/ 2>/dev/null || echo "No OpenVPN directory"
          ls -la Generic/ 2>/dev/null || echo "No Generic directory"
          
          echo "Attempting to regenerate VPN client configuration..."
          echo "Generating new P2S VPN client configuration..."
          
          # Generate new VPN client configuration
          az network vnet-gateway vpn-client generate \
            --resource-group "${{ github.event.inputs.resource_group }}" \
            --name "${{ github.event.inputs.vpn_gateway_name }}" \
            --authentication-method EAPTLS
          
          echo "⚠️ New VPN client configuration generated. Please download and upload to Azure Storage."
          echo "The workflow will continue with XML fallback, but you may need to update the package."
          
          # For now, exit since we can't automatically download the newly generated config
          exit 1
        fi
        
        # Verify we have a configuration file
        if [ ! -f ~/vpn-client.ovpn ]; then
          echo "❌ Failed to create vpn-client.ovpn"
          exit 1
        fi
        
        echo "Configuration file created, size: $(wc -c < ~/vpn-client.ovpn) bytes"
        echo "Configuration file line count: $(wc -l < ~/vpn-client.ovpn) lines"
        
        # If client certificates are available, modify the config for certificate authentication
        if [ -n "${{ steps.client-certs.outputs.client_cert_path }}" ]; then
          echo "Configuring certificate authentication..."
          
          if [ "$AZURE_STYLE_CONFIG" = "true" ]; then
            echo "Updating Azure-style configuration with embedded certificates..."
            
            # Use the external Python script to replace certificate placeholders
            python3 replace_cert_placeholders.py ~/vpn-client.ovpn "${{ steps.client-certs.outputs.client_cert_path }}" "${{ steps.client-certs.outputs.client_key_path }}"
            
            if [ $? -eq 0 ]; then
              echo "✅ Certificate placeholders replaced successfully"
            else
              echo "❌ Failed to replace certificate placeholders"
              exit 1
            fi
            
          else
            echo "Updating standard OpenVPN configuration..."
            
            # Remove auth-user-pass since we're using certificate authentication
            sed -i '' '/auth-user-pass/d' ~/vpn-client.ovpn
            
            # Add client certificate and key paths if not already present
            if ! grep -q "^cert " ~/vpn-client.ovpn; then
              echo "cert ${{ steps.client-certs.outputs.client_cert_path }}" >> ~/vpn-client.ovpn
            fi
            
            if ! grep -q "^key " ~/vpn-client.ovpn; then
              echo "key ${{ steps.client-certs.outputs.client_key_path }}" >> ~/vpn-client.ovpn
            fi
          fi
        else
          echo "⚠️ No client certificates provided - the configuration may not work without proper authentication"
          if [ "$AZURE_STYLE_CONFIG" = "true" ]; then
            echo "❌ Azure-style configuration requires client certificates to replace \$CLIENTCERTIFICATE and \$PRIVATEKEY placeholders"
            exit 1
          fi
        fi
        
        echo "Final OpenVPN configuration file:"
        echo "Size: $(wc -c < ~/vpn-client.ovpn) bytes, Lines: $(wc -l < ~/vpn-client.ovpn)"
        cat ~/vpn-client.ovpn

    - name: Establish VPN Connection
      id: vpn-connect
      run: |
        echo "Establishing VPN connection..."
        
        if [ ! -f ~/vpn-client.ovpn ]; then
          echo "Error: OpenVPN configuration file not found!"
          exit 1
        fi
        
        # Create OpenVPN log directory
        sudo mkdir -p /var/log
        sudo mkdir -p /var/run
        
        # Pre-flight checks
        echo "Pre-flight checks before starting OpenVPN..."
        echo "OpenVPN configuration file exists: $(test -f ~/vpn-client.ovpn && echo 'YES' || echo 'NO')"
        echo "OpenVPN configuration file size: $(wc -c < ~/vpn-client.ovpn 2>/dev/null || echo 'ERROR')"
        echo "OpenVPN binary location: $(which openvpn)"
        echo "OpenVPN version: $(openvpn --version 2>&1 | head -1)"
        echo "Current user: $(whoami)"
        echo "Current working directory: $(pwd)"
        
        # Check file permissions
        echo "File permissions check:"
        ls -la ~/vpn-client.ovpn
        ls -la ~/ca.crt 2>/dev/null || echo "ca.crt not found"
        ls -la $HOME/vpn-certs/ 2>/dev/null || echo "vpn-certs directory not found"
        
        # Validate OpenVPN configuration
        echo "Validating OpenVPN configuration..."
        
        # Perform basic configuration validation
        VALIDATION_ERRORS=0
        
        echo "Checking required OpenVPN directives:"
        
        if ! grep -q "^client" ~/vpn-client.ovpn; then
          echo "❌ Missing 'client' directive"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        else
          echo "✅ Found 'client' directive"
        fi
        
        if ! grep -q "^remote " ~/vpn-client.ovpn; then
          echo "❌ Missing 'remote' directive"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        else
          REMOTE_LINE=$(grep "^remote " ~/vpn-client.ovpn | head -1)
          echo "✅ Found remote directive: $REMOTE_LINE"
        fi
        
        if ! grep -q "^dev " ~/vpn-client.ovpn; then
          echo "❌ Missing 'dev' directive"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        else
          DEV_LINE=$(grep "^dev " ~/vpn-client.ovpn | head -1)
          echo "✅ Found dev directive: $DEV_LINE"
        fi
        
        if ! grep -q "^proto " ~/vpn-client.ovpn; then
          echo "❌ Missing 'proto' directive"
          VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
        else
          PROTO_LINE=$(grep "^proto " ~/vpn-client.ovpn | head -1)
          echo "✅ Found proto directive: $PROTO_LINE"
        fi
        
        # Check for authentication method
        echo "Checking authentication configuration:"
        if grep -q "<cert>" ~/vpn-client.ovpn && grep -q "<key>" ~/vpn-client.ovpn; then
          echo "✅ Found embedded certificate authentication"
          # Verify certificates were properly replaced
          if grep -q '\$CLIENTCERTIFICATE\|\$PRIVATEKEY' ~/vpn-client.ovpn; then
            echo "❌ Certificate placeholders not replaced"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          else
            echo "✅ Certificate placeholders replaced successfully"
          fi
        elif grep -q "^cert " ~/vpn-client.ovpn && grep -q "^key " ~/vpn-client.ovpn; then
          echo "✅ Found file-based certificate authentication"
          CERT_FILE=$(grep "^cert " ~/vpn-client.ovpn | awk '{print $2}' | head -1)
          KEY_FILE=$(grep "^key " ~/vpn-client.ovpn | awk '{print $2}' | head -1)
          if [ ! -f "$CERT_FILE" ]; then
            echo "❌ Certificate file not found: $CERT_FILE"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          fi
          if [ ! -f "$KEY_FILE" ]; then
            echo "❌ Private key file not found: $KEY_FILE"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          fi
        elif grep -q "auth-user-pass" ~/vpn-client.ovpn; then
          echo "✅ Found username/password authentication"
        else
          echo "⚠️ No clear authentication method found - this may cause connection issues"
        fi
        
        # Check for CA certificate
        if grep -q "<ca>" ~/vpn-client.ovpn; then
          echo "✅ Found embedded CA certificate"
        elif grep -q "^ca " ~/vpn-client.ovpn; then
          CA_FILE=$(grep "^ca " ~/vpn-client.ovpn | awk '{print $2}' | head -1)
          if [ -f "$CA_FILE" ]; then
            echo "✅ Found CA certificate file: $CA_FILE"
          else
            echo "❌ CA certificate file not found: $CA_FILE"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          fi
        else
          echo "⚠️ No CA certificate found - this may cause connection issues"
        fi
        
        if [ $VALIDATION_ERRORS -gt 0 ]; then
          echo "❌ Configuration validation failed with $VALIDATION_ERRORS critical errors"
          echo "Configuration file contents:"
          cat ~/vpn-client.ovpn
          exit 1
        else
          echo "✅ OpenVPN configuration validation passed"
        fi
        
        # Check network prerequisites
        echo "Network prerequisites check:"
        echo "Available network interfaces:"
        ifconfig | grep -E "^[a-z]" || true
        echo "Current routing table:"
        netstat -rn | head -10 || true
        
        # Prepare for OpenVPN startup - ensure proper permissions and directories
        echo "Preparing OpenVPN startup environment..."
        
        # Create a user-writable PID directory (avoid /var/run which may have permission issues)
        PID_DIR="$HOME/.openvpn"
        LOG_DIR="$HOME/.openvpn"
        mkdir -p "$PID_DIR" "$LOG_DIR"
        
        PID_FILE="$PID_DIR/openvpn.pid"
        LOG_FILE="$LOG_DIR/openvpn.log"
        
        echo "Using PID file: $PID_FILE"
        echo "Using log file: $LOG_FILE"
        
        # Clean up any existing PID/log files
        rm -f "$PID_FILE" "$LOG_FILE"
        
        # Start OpenVPN connection in the background
        echo "Starting OpenVPN connection..."
        echo "Command: sudo openvpn --config ~/vpn-client.ovpn --daemon --log $LOG_FILE --writepid $PID_FILE --verb 3"
        
        # First try to start OpenVPN and capture any immediate errors
        if sudo openvpn --config ~/vpn-client.ovpn \
          --daemon \
          --log "$LOG_FILE" \
          --writepid "$PID_FILE" \
          --verb 3; then
          echo "✅ OpenVPN daemon command executed successfully"
        else
          EXIT_CODE=$?
          echo "❌ OpenVPN daemon command failed with exit code: $EXIT_CODE"
          
          # Try to get immediate error information by running in foreground briefly
          echo "Attempting foreground startup for immediate error diagnosis..."
          echo "Running: sudo openvpn --config ~/vpn-client.ovpn --verb 4"
          
          # Use a background process that we can kill after a few seconds
          sudo openvpn --config ~/vpn-client.ovpn --verb 4 > "$LOG_DIR/foreground.log" 2>&1 &
          FOREGROUND_PID=$!
          
          # Wait a few seconds to capture startup errors
          sleep 5
          
          # Kill the foreground process
          sudo kill $FOREGROUND_PID 2>/dev/null || true
          wait $FOREGROUND_PID 2>/dev/null || true
          
          echo "Foreground startup log:"
          cat "$LOG_DIR/foreground.log" 2>/dev/null || echo "No foreground log available"
          
          exit $EXIT_CODE
        fi
        
        # Give OpenVPN a moment to start and create PID file
        echo "Waiting for OpenVPN to initialize..."
        sleep 5
        
        # Post-startup diagnostics
        echo "Post-startup diagnostics:"
        echo "PID file exists: $(test -f "$PID_FILE" && echo 'YES' || echo 'NO')"
        echo "Log file exists: $(test -f "$LOG_FILE" && echo 'YES' || echo 'NO')"
        
        # Check if PID file was created
        if [ ! -f "$PID_FILE" ]; then
          echo "❌ OpenVPN PID file was not created"
          echo "This indicates OpenVPN failed to start or exited immediately"
          
          # Check for log file content
          if [ -f "$LOG_FILE" ]; then
            echo "OpenVPN log content:"
            cat "$LOG_FILE"
          else
            echo "No log file was created"
          fi
          
          # Check for any OpenVPN processes that might be running
          OPENVPN_PROCESSES=$(ps aux | grep -v grep | grep openvpn || true)
          if [ -n "$OPENVPN_PROCESSES" ]; then
            echo "Found running OpenVPN processes:"
            echo "$OPENVPN_PROCESSES"
          else
            echo "No OpenVPN processes found running"
          fi
          
          echo "❌ OpenVPN startup failed - exiting"
          exit 1
        fi
        
        # Read PID and verify process is running
        if [ -f "$PID_FILE" ]; then
          PID=$(cat "$PID_FILE")
          echo "OpenVPN PID: $PID"
          echo "Process running: $(kill -0 $PID 2>/dev/null && echo 'YES' || echo 'NO')"
          echo "Process details: $(ps -p $PID 2>/dev/null || echo 'Process not found')"
          
          if ! kill -0 $PID 2>/dev/null; then
            echo "❌ OpenVPN process is not running despite PID file existing"
            echo "Process may have crashed immediately after startup"
            
            if [ -f "$LOG_FILE" ]; then
              echo "OpenVPN log content:"
              cat "$LOG_FILE"
            fi
            exit 1
          fi
        fi
        
        if [ -f "$LOG_FILE" ]; then
          echo "Initial OpenVPN log content:"
          cat "$LOG_FILE"
        fi
        
        # Wait for connection to establish
        echo "Waiting for VPN connection to establish (timeout: ${{ env.VPN_CONNECTION_TIMEOUT }} seconds)..."
        timeout_counter=0
        max_timeout=${{ env.VPN_CONNECTION_TIMEOUT }}
        
        while [ $timeout_counter -lt $max_timeout ]; do
          echo "Connection attempt $((timeout_counter/2 + 1)) - checking status..."
          
          # Check if OpenVPN process is running
          if [ -f "$PID_FILE" ]; then
            PID=$(cat "$PID_FILE")
            if kill -0 $PID 2>/dev/null; then
              echo "✅ OpenVPN process is running (PID: $PID)"
              
              # Check if tun interface is up
              TUN_INTERFACES=$(ifconfig | grep "utun" | cut -d: -f1 || true)
              if [ -n "$TUN_INTERFACES" ]; then
                echo "✅ TUN interface(s) found: $TUN_INTERFACES"
                
                # Check for VPN IP assignment
                VPN_IP=$(ifconfig | grep -A 1 "utun" | grep "inet " | awk '{print $2}' | head -1 || true)
                if [ -n "$VPN_IP" ]; then
                  echo "✅ VPN IP assigned: $VPN_IP"
                  echo "VPN connection established successfully!"
                  echo "vpn_connected=true" >> $GITHUB_OUTPUT
                  
                  # Display network information
                  echo "Network interfaces:"
                  ifconfig | grep -A 5 "utun"
                  
                  echo "Routing table:"
                  netstat -rn | head -20
                  
                  echo "vpn_ip=$VPN_IP" >> $GITHUB_OUTPUT
                  break
                else
                  echo "⏳ TUN interface exists but no IP assigned yet..."
                fi
              else
                echo "⏳ No TUN interface found yet..."
                ifconfig | grep -E "^[a-z]" | head -5
              fi
            else
              echo "❌ OpenVPN PID file exists but process is not running"
              # Check why the process died
              if [ -f "$LOG_FILE" ]; then
                echo "Recent OpenVPN log entries:"
                tail -10 "$LOG_FILE"
              fi
              break
            fi
          else
            echo "❌ OpenVPN PID file not found"
            # Check if process is running without PID file
            OPENVPN_PROCESSES=$(ps aux | grep -v grep | grep openvpn || true)
            if [ -n "$OPENVPN_PROCESSES" ]; then
              echo "Found OpenVPN processes without PID file:"
              echo "$OPENVPN_PROCESSES"
            fi
            break
          fi
          
          # Show current log tail for debugging
          if [ -f "$LOG_FILE" ] && [ $((timeout_counter % 10)) -eq 0 ]; then
            echo "Recent log entries (every 10 seconds):"
            tail -5 "$LOG_FILE"
          fi
          
          sleep 2
          timeout_counter=$((timeout_counter + 2))
          echo "Waiting... ($timeout_counter/$max_timeout seconds)"
        done
        
        if [ $timeout_counter -ge $max_timeout ]; then
          echo "❌ VPN connection failed to establish within timeout period"
          echo "Final diagnostics:"
          
          # Final process check
          if [ -f "$PID_FILE" ]; then
            PID=$(cat "$PID_FILE")
            echo "PID file contents: $PID"
            echo "Process status: $(kill -0 $PID 2>/dev/null && echo 'RUNNING' || echo 'NOT RUNNING')"
            if kill -0 $PID 2>/dev/null; then
              echo "Process details: $(ps -p $PID)"
            fi
          fi
          
          # Network interface check
          echo "Current network interfaces:"
          ifconfig | grep -E "^[a-z]"
          
          # Full log dump
          echo "Complete OpenVPN log:"
          cat "$LOG_FILE" 2>/dev/null || echo "No log file found"
          
          # System diagnostics
          echo "System diagnostics:"
          echo "Available TUN/TAP devices:"
          ls -la /dev/tun* 2>/dev/null || echo "No TUN devices found"
          ls -la /dev/tap* 2>/dev/null || echo "No TAP devices found"
          
          echo "Kernel modules:"
          kextstat | grep -i tun || echo "No TUN kernel extensions loaded"
          
          echo "vpn_connected=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Test Private App Service Connectivity
      if: ${{ env.PRIVATE_APP_SERVICE_URL != '' }}
      run: |
        echo "Testing connectivity to private App Service..."
        
        if [ "${{ steps.vpn-connect.outputs.vpn_connected }}" != "true" ]; then
          echo "Skipping App Service test - VPN not connected"
          exit 1
        fi
        
        APP_SERVICE_URL="${{ env.PRIVATE_APP_SERVICE_URL }}"
        echo "Testing connectivity to: $APP_SERVICE_URL"
        
        # Extract hostname for DNS resolution test
        HOSTNAME=$(echo "$APP_SERVICE_URL" | sed 's|https\?://||' | cut -d'/' -f1)
        echo "Hostname: $HOSTNAME"
        
        # Test DNS resolution
        echo "Testing DNS resolution..."
        if nslookup "$HOSTNAME"; then
          echo "DNS resolution successful"
        else
          echo "DNS resolution failed"
        fi
        
        # Test HTTP connectivity with timeout
        echo "Testing HTTP connectivity..."
        if curl -s --max-time 30 --connect-timeout 10 -I "$APP_SERVICE_URL"; then
          echo "✅ Successfully connected to private App Service!"
          
          # Get detailed response
          echo "Detailed response:"
          curl -s --max-time 30 --connect-timeout 10 "$APP_SERVICE_URL" | head -20
          
        else
          echo "❌ Failed to connect to private App Service"
          echo "This might be due to:"
          echo "1. App Service not configured for private endpoints"
          echo "2. Network Security Group rules blocking access"
          echo "3. App Service firewall settings"
          echo "4. Incorrect URL or App Service not running"
          
          # Additional debugging
          echo "Network diagnostics:"
          echo "Current routing table:"
          netstat -rn
          
          exit 1
        fi

    - name: Test VPN Connection (Optional)
      if: ${{ github.event.inputs.test_connection == 'true' && steps.vpn-connect.outputs.vpn_connected == 'true' }}
      run: |
        echo "Running additional VPN connection tests..."
        
        # Test basic connectivity
        echo "Testing basic network connectivity..."
        
        # Test ping to Azure DNS
        echo "Testing ping to Azure DNS (168.63.129.16)..."
        if ping -c 4 168.63.129.16; then
          echo "✅ Azure DNS reachable"
        else
          echo "❌ Azure DNS not reachable"
        fi
        
        # Test connectivity to Azure public endpoints
        echo "Testing connectivity to Azure public endpoints..."
        if curl -s --max-time 10 https://management.azure.com > /dev/null; then
          echo "✅ Azure Management API reachable"
        else
          echo "❌ Azure Management API not reachable"
        fi
        
        # Display VPN statistics if available
        echo "VPN Connection Statistics:"
        LOG_FILE="$HOME/.openvpn/openvpn.log"
        if [ -f "$LOG_FILE" ]; then
          echo "Recent OpenVPN log entries:"
          tail -20 "$LOG_FILE"
        else
          echo "No OpenVPN log file found"
        fi

    - name: Disconnect VPN (Cleanup)
      if: always()
      run: |
        echo "Disconnecting VPN connection..."
        
        # Use the same PID file location as during startup
        PID_FILE="$HOME/.openvpn/openvpn.pid"
        
        # Stop OpenVPN if running
        if [ -f "$PID_FILE" ]; then
          VPN_PID=$(cat "$PID_FILE")
          if kill -0 $VPN_PID 2>/dev/null; then
            echo "Stopping OpenVPN process (PID: $VPN_PID)..."
            sudo kill $VPN_PID
            sleep 5
            
            # Force kill if still running
            if kill -0 $VPN_PID 2>/dev/null; then
              echo "Force stopping OpenVPN process..."
              sudo kill -9 $VPN_PID
            fi
          fi
          rm -f "$PID_FILE"
        fi
        
        # Clean up any remaining OpenVPN processes
        sudo pkill -f openvpn || true
        
        echo "VPN disconnected"

    - name: Save VPN Configuration Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vpn-configuration
        path: |
          ~/vpn-client.ovpn
          ~/ca.crt
          ${{ env.HOME }}/vpn-certs/
        retention-days: 1

    - name: Display Connection Instructions
      run: |
        echo "=================================="
        echo "VPN Setup Complete!"
        echo "=================================="
        echo ""
        echo "To connect to your Azure VPN:"
        echo "1. Download the 'vpn-configuration' artifact from this workflow run"
        echo "2. Extract the files to a secure location"
        echo "3. Connect using OpenVPN:"
        echo "   sudo openvpn --config vpn-client.ovpn"
        echo ""
        echo "Required secrets for this workflow:"
        echo "- AZURE_CLIENT_ID: Azure service principal client ID"
        echo "- AZURE_TENANT_ID: Azure tenant ID"
        echo "- P2S_CLIENT_CERT: Base64 encoded client certificate (required)"
        echo "- P2S_CLIENT_KEY: Base64 encoded client private key (required)"
        echo ""
        echo "Required inputs for this workflow:"
        echo "- azure_subscription_id: Your Azure subscription ID"
        echo "- resource_group: Resource group containing the VPN Gateway"
        echo "- vpn_gateway_name: Name of your Virtual Network Gateway"
        echo "- private_app_service_url: URL of your private App Service (optional)"
        echo ""
        echo "Prerequisites:"
        echo "- Azure VPN Gateway configured for P2S certificate authentication"
        echo "- Root certificate uploaded to the VPN Gateway"
        echo "- VNet-Gateway.zip uploaded to storage account 'vpnpackageworkflowcenter'"
        echo "- Private App Service configured with VNet integration (if testing connectivity)"
        echo ""
        if [ -n "${{ env.PRIVATE_APP_SERVICE_URL }}" ]; then
          if [ "${{ steps.vpn-connect.outputs.vpn_connected }}" == "true" ]; then
            echo "✅ VPN Connection Status: Connected"
            echo "✅ Private App Service URL: ${{ env.PRIVATE_APP_SERVICE_URL }}"
            echo "✅ VPN IP Address: ${{ steps.vpn-connect.outputs.vpn_ip }}"
          else
            echo "❌ VPN Connection Status: Failed"
          fi
        else
          echo "ℹ️  No private App Service URL provided for testing"
        fi
        echo ""
        echo "Security reminder: The configuration files contain sensitive information."
        echo "Handle them securely and delete them when no longer needed."

    - name: Cleanup Sensitive Files
      if: always()
      run: |
        echo "Cleaning up sensitive files..."
        rm -f ~/vpn-client.ovpn
        rm -f ~/ca.crt
        rm -rf $HOME/vpn-certs/
        rm -f vpn-client-config.zip
        rm -rf OpenVPN/
        rm -rf Generic/
        
        # Clean up OpenVPN logs and PID files (both old and new locations)
        rm -rf $HOME/.openvpn/
        sudo rm -f /var/log/openvpn.log 2>/dev/null || true
        sudo rm -f /var/run/openvpn.pid 2>/dev/null || true
        
        echo "Cleanup completed"

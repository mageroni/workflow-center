name: Azure P2S VPN Connection Setup

on:
  workflow_dispatch:
    inputs:
      azure_subscription_id:
        description: 'Azure Subscription ID'
        required: true
        type: string
      resource_group:
        description: 'Resource Group containing the VPN Gateway'
        required: true
        type: string
      vpn_gateway_name:
        description: 'Virtual Network Gateway Name'
        required: true
        type: string
      client_certificate_name:
        description: 'P2S Client Certificate Name (optional)'
        required: false
        type: string
        default: 'P2SClientCert'
      test_connection:
        description: 'Test VPN connection after setup'
        required: false
        type: boolean
        default: false
      private_app_service_url:
        description: 'Private App Service URL to test connectivity (e.g., https://myapp.azurewebsites.net)'
        required: false
        type: string
      vpn_connection_timeout:
        description: 'VPN connection timeout in seconds'
        required: false
        type: number
        default: 30

env:
  AZURE_SUBSCRIPTION_ID: ${{ inputs.azure_subscription_id }}
  RESOURCE_GROUP: ${{ inputs.resource_group }}
  VPN_GATEWAY_NAME: ${{ inputs.vpn_gateway_name }}
  CLIENT_CERT_NAME: ${{ inputs.client_certificate_name }}
  PRIVATE_APP_SERVICE_URL: ${{ inputs.private_app_service_url }}
  VPN_CONNECTION_TIMEOUT: ${{ inputs.vpn_connection_timeout }}

jobs:
  setup-p2s-vpn:
    runs-on: macos-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install OpenVPN
      run: |
        echo "Installing OpenVPN via Homebrew..."
        brew update
        brew install openvpn
        
        # Verify installation
        openvpn --version

    - name: Install Azure CLI
      run: |
        echo "Installing Azure CLI..."
        brew update
        brew install azure-cli
        
        # Verify installation
        az version

    - name: Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Set Azure Subscription
      run: |
        az account set --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}
        az account show

    - name: Download P2S VPN Client Configuration
      id: vpn-config
      run: |
        echo "Downloading P2S VPN client configuration from Azure Storage..."
        
        # Download VPN client configuration package from Azure Storage Account
        echo "Downloading VNet-Gateway.zip from Azure Storage Account 'vpnpackageworkflowcenter'..."
        az storage blob download \
          --account-name vpnpackageworkflowcenter \
          --container-name vpn \
          --name VNet-Gateway.zip \
          --file vpn-client-config.zip \
          --auth-mode login
        
        echo "VPN Client configuration downloaded successfully"
        
        # Extract the configuration
        # Use ditto as a fallback if unzip fails due to Windows paths
        if ! unzip -q vpn-client-config.zip; then
          echo "unzip failed, retrying with ditto..."
          ditto -x -k vpn-client-config.zip .
        fi
        ls -la

    - name: Setup Client Certificates
      id: client-certs
      run: |
        echo "Setting up client certificates..."
        
        # Create certificates directory
        mkdir -p ~/vpn-certs
        
        # Check if client certificate is provided as secret
        if [ -n "${{ secrets.P2S_CLIENT_CERT }}" ] && [ -n "${{ secrets.P2S_CLIENT_KEY }}" ]; then
          echo "Using provided client certificate from secrets..."
          echo "${{ secrets.P2S_CLIENT_CERT }}" > ~/vpn-certs/client.crt
          echo "${{ secrets.P2S_CLIENT_KEY }}" > ~/vpn-certs/client.key
          
          # Set proper permissions
          chmod 600 ~/vpn-certs/client.key
          chmod 644 ~/vpn-certs/client.crt
          
          echo "client_cert_path=~/vpn-certs/client.crt" >> $GITHUB_OUTPUT
          echo "client_key_path=~/vpn-certs/client.key" >> $GITHUB_OUTPUT
        else
          echo "No client certificate provided in secrets. You may need to configure certificate authentication."
          echo "Please ensure P2S_CLIENT_CERT and P2S_CLIENT_KEY secrets are set if using certificate authentication."
        fi

    - name: Configure OpenVPN Client
      run: |
        echo "Configuring OpenVPN client..."
        
        # Use the existing vpnconfig.ovpn file from the downloaded package
        if [ -f "OpenVPN/vpnconfig.ovpn" ]; then
          echo "Found existing vpnconfig.ovpn, using it as base configuration..."
          cp "OpenVPN/vpnconfig.ovpn" ~/vpn-client.ovpn
          
          # Copy CA certificate if available
          if [ -f "OpenVPN/ca.crt" ]; then
            cp OpenVPN/ca.crt ~/ca.crt
          fi
          
        elif [ -f "OpenVPN/VpnSettings.xml" ]; then
          echo "Found VpnSettings.xml, extracting configuration..."
          
          # Extract server information from VpnSettings.xml
          SERVER=$(grep -o '<VpnServer>[^<]*</VpnServer>' OpenVPN/VpnSettings.xml | sed 's/<[^>]*>//g')
          echo "VPN Server: $SERVER"
          
          # Create OpenVPN configuration file as fallback
          cat > ~/vpn-client.ovpn << EOF
        client
        dev tun
        proto udp
        remote $SERVER 1194
        resolv-retry infinite
        nobind
        persist-key
        persist-tun
        ca ca.crt
        verb 3
        auth-user-pass
        route-method exe
        route-delay 2
        EOF
          
          # Copy CA certificate if available
          if [ -f "OpenVPN/ca.crt" ]; then
            cp OpenVPN/ca.crt ~/ca.crt
          fi
          
        elif [ -f "Generic/VpnSettings.xml" ]; then
          echo "Found Generic VPN settings..."
          # Handle generic configuration
          cp Generic/VpnSettings.xml ~/vpn-settings.xml
        else
          echo "Warning: No recognized VPN configuration found in the package"
          ls -la OpenVPN/ 2>/dev/null || echo "No OpenVPN directory"
          ls -la Generic/ 2>/dev/null || echo "No Generic directory"
          exit 1
        fi
        
        # If client certificates are available, modify the config for certificate authentication
        if [ -n "${{ steps.client-certs.outputs.client_cert_path }}" ]; then
          echo "Configuring certificate authentication..."
          
          # Remove auth-user-pass since we're using certificate authentication
          sed -i '' '/auth-user-pass/d' ~/vpn-client.ovpn
          
          # Add client certificate and key paths if not already present
          if ! grep -q "^cert " ~/vpn-client.ovpn; then
            echo "cert ${{ steps.client-certs.outputs.client_cert_path }}" >> ~/vpn-client.ovpn
          fi
          
          if ! grep -q "^key " ~/vpn-client.ovpn; then
            echo "key ${{ steps.client-certs.outputs.client_key_path }}" >> ~/vpn-client.ovpn
          fi
        fi
        
        echo "Final OpenVPN configuration file:"
        cat ~/vpn-client.ovpn

    - name: Establish VPN Connection
      id: vpn-connect
      run: |
        echo "Establishing VPN connection..."
        
        if [ ! -f ~/vpn-client.ovpn ]; then
          echo "Error: OpenVPN configuration file not found!"
          exit 1
        fi
        
        # Create OpenVPN log directory
        sudo mkdir -p /var/log
        sudo mkdir -p /var/run
        
        # Pre-flight checks
        echo "Pre-flight checks before starting OpenVPN..."
        echo "OpenVPN configuration file exists: $(test -f ~/vpn-client.ovpn && echo 'YES' || echo 'NO')"
        echo "OpenVPN configuration file size: $(wc -c < ~/vpn-client.ovpn 2>/dev/null || echo 'ERROR')"
        echo "OpenVPN binary location: $(which openvpn)"
        echo "OpenVPN version: $(openvpn --version 2>&1 | head -1)"
        echo "Current user: $(whoami)"
        echo "Current working directory: $(pwd)"
        
        # Check file permissions
        echo "File permissions check:"
        ls -la ~/vpn-client.ovpn
        ls -la ~/ca.crt 2>/dev/null || echo "ca.crt not found"
        ls -la ~/vpn-certs/ 2>/dev/null || echo "vpn-certs directory not found"
        
        # Test OpenVPN configuration syntax
        echo "Testing OpenVPN configuration syntax..."
        if sudo openvpn --config ~/vpn-client.ovpn --verb 1 --test-crypto 2>&1; then
          echo "✅ OpenVPN configuration syntax test passed"
        else
          echo "❌ OpenVPN configuration syntax test failed"
          echo "Configuration file contents:"
          cat ~/vpn-client.ovpn
          exit 1
        fi
        
        # Check network prerequisites
        echo "Network prerequisites check:"
        echo "Available network interfaces:"
        ifconfig | grep -E "^[a-z]" || true
        echo "Current routing table:"
        netstat -rn | head -10 || true
        
        # Start OpenVPN connection in the background
        echo "Starting OpenVPN connection..."
        echo "Command: sudo openvpn --config ~/vpn-client.ovpn --daemon --log /var/log/openvpn.log --writepid /var/run/openvpn.pid --verb 3"
        
        if sudo openvpn --config ~/vpn-client.ovpn \
          --daemon \
          --log /var/log/openvpn.log \
          --writepid /var/run/openvpn.pid \
          --verb 3; then
          echo "✅ OpenVPN command executed successfully"
        else
          EXIT_CODE=$?
          echo "❌ OpenVPN command failed with exit code: $EXIT_CODE"
          
          # Immediate diagnostics
          echo "Immediate post-failure diagnostics:"
          echo "PID file exists: $(test -f /var/run/openvpn.pid && echo 'YES' || echo 'NO')"
          echo "Log file exists: $(test -f /var/log/openvpn.log && echo 'YES' || echo 'NO')"
          
          if [ -f /var/log/openvpn.log ]; then
            echo "OpenVPN log content:"
            sudo cat /var/log/openvpn.log
          fi
          
          # Try running OpenVPN in foreground for immediate error output
          echo "Attempting to run OpenVPN in foreground for immediate error diagnosis..."
          timeout 10 sudo openvpn --config ~/vpn-client.ovpn --verb 4 || echo "Foreground test completed/timed out"
          
          exit $EXIT_CODE
        fi
        
        # Give OpenVPN a moment to start
        sleep 3
        
        # Post-startup diagnostics
        echo "Post-startup diagnostics:"
        echo "PID file exists: $(test -f /var/run/openvpn.pid && echo 'YES' || echo 'NO')"
        echo "Log file exists: $(test -f /var/log/openvpn.log && echo 'YES' || echo 'NO')"
        
        if [ -f /var/run/openvpn.pid ]; then
          PID=$(cat /var/run/openvpn.pid)
          echo "OpenVPN PID: $PID"
          echo "Process running: $(kill -0 $PID 2>/dev/null && echo 'YES' || echo 'NO')"
          echo "Process details: $(ps -p $PID 2>/dev/null || echo 'Process not found')"
        fi
        
        if [ -f /var/log/openvpn.log ]; then
          echo "Initial OpenVPN log content:"
          sudo cat /var/log/openvpn.log
        fi
        
        # Wait for connection to establish
        echo "Waiting for VPN connection to establish (timeout: ${{ env.VPN_CONNECTION_TIMEOUT }} seconds)..."
        timeout_counter=0
        max_timeout=${{ env.VPN_CONNECTION_TIMEOUT }}
        
        while [ $timeout_counter -lt $max_timeout ]; do
          echo "Connection attempt $((timeout_counter/2 + 1)) - checking status..."
          
          # Check if OpenVPN process is running
          if [ -f /var/run/openvpn.pid ]; then
            PID=$(cat /var/run/openvpn.pid)
            if kill -0 $PID 2>/dev/null; then
              echo "✅ OpenVPN process is running (PID: $PID)"
              
              # Check if tun interface is up
              TUN_INTERFACES=$(ifconfig | grep "utun" | cut -d: -f1 || true)
              if [ -n "$TUN_INTERFACES" ]; then
                echo "✅ TUN interface(s) found: $TUN_INTERFACES"
                
                # Check for VPN IP assignment
                VPN_IP=$(ifconfig | grep -A 1 "utun" | grep "inet " | awk '{print $2}' | head -1 || true)
                if [ -n "$VPN_IP" ]; then
                  echo "✅ VPN IP assigned: $VPN_IP"
                  echo "VPN connection established successfully!"
                  echo "vpn_connected=true" >> $GITHUB_OUTPUT
                  
                  # Display network information
                  echo "Network interfaces:"
                  ifconfig | grep -A 5 "utun"
                  
                  echo "Routing table:"
                  netstat -rn | head -20
                  
                  echo "vpn_ip=$VPN_IP" >> $GITHUB_OUTPUT
                  break
                else
                  echo "⏳ TUN interface exists but no IP assigned yet..."
                fi
              else
                echo "⏳ No TUN interface found yet..."
                ifconfig | grep -E "^[a-z]" | head -5
              fi
            else
              echo "❌ OpenVPN PID file exists but process is not running"
              # Check why the process died
              if [ -f /var/log/openvpn.log ]; then
                echo "Recent OpenVPN log entries:"
                sudo tail -10 /var/log/openvpn.log
              fi
              break
            fi
          else
            echo "❌ OpenVPN PID file not found"
            # Check if process is running without PID file
            OPENVPN_PROCESSES=$(ps aux | grep -v grep | grep openvpn || true)
            if [ -n "$OPENVPN_PROCESSES" ]; then
              echo "Found OpenVPN processes without PID file:"
              echo "$OPENVPN_PROCESSES"
            fi
            break
          fi
          
          # Show current log tail for debugging
          if [ -f /var/log/openvpn.log ] && [ $((timeout_counter % 10)) -eq 0 ]; then
            echo "Recent log entries (every 10 seconds):"
            sudo tail -5 /var/log/openvpn.log
          fi
          
          sleep 2
          timeout_counter=$((timeout_counter + 2))
          echo "Waiting... ($timeout_counter/$max_timeout seconds)"
        done
        
        if [ $timeout_counter -ge $max_timeout ]; then
          echo "❌ VPN connection failed to establish within timeout period"
          echo "Final diagnostics:"
          
          # Final process check
          if [ -f /var/run/openvpn.pid ]; then
            PID=$(cat /var/run/openvpn.pid)
            echo "PID file contents: $PID"
            echo "Process status: $(kill -0 $PID 2>/dev/null && echo 'RUNNING' || echo 'NOT RUNNING')"
            if kill -0 $PID 2>/dev/null; then
              echo "Process details: $(ps -p $PID)"
            fi
          fi
          
          # Network interface check
          echo "Current network interfaces:"
          ifconfig | grep -E "^[a-z]"
          
          # Full log dump
          echo "Complete OpenVPN log:"
          sudo cat /var/log/openvpn.log 2>/dev/null || echo "No log file found"
          
          # System diagnostics
          echo "System diagnostics:"
          echo "Available TUN/TAP devices:"
          ls -la /dev/tun* 2>/dev/null || echo "No TUN devices found"
          ls -la /dev/tap* 2>/dev/null || echo "No TAP devices found"
          
          echo "Kernel modules:"
          kextstat | grep -i tun || echo "No TUN kernel extensions loaded"
          
          echo "vpn_connected=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Test Private App Service Connectivity
      if: ${{ env.PRIVATE_APP_SERVICE_URL != '' }}
      run: |
        echo "Testing connectivity to private App Service..."
        
        if [ "${{ steps.vpn-connect.outputs.vpn_connected }}" != "true" ]; then
          echo "Skipping App Service test - VPN not connected"
          exit 1
        fi
        
        APP_SERVICE_URL="${{ env.PRIVATE_APP_SERVICE_URL }}"
        echo "Testing connectivity to: $APP_SERVICE_URL"
        
        # Extract hostname for DNS resolution test
        HOSTNAME=$(echo "$APP_SERVICE_URL" | sed 's|https\?://||' | cut -d'/' -f1)
        echo "Hostname: $HOSTNAME"
        
        # Test DNS resolution
        echo "Testing DNS resolution..."
        if nslookup "$HOSTNAME"; then
          echo "DNS resolution successful"
        else
          echo "DNS resolution failed"
        fi
        
        # Test HTTP connectivity with timeout
        echo "Testing HTTP connectivity..."
        if curl -s --max-time 30 --connect-timeout 10 -I "$APP_SERVICE_URL"; then
          echo "✅ Successfully connected to private App Service!"
          
          # Get detailed response
          echo "Detailed response:"
          curl -s --max-time 30 --connect-timeout 10 "$APP_SERVICE_URL" | head -20
          
        else
          echo "❌ Failed to connect to private App Service"
          echo "This might be due to:"
          echo "1. App Service not configured for private endpoints"
          echo "2. Network Security Group rules blocking access"
          echo "3. App Service firewall settings"
          echo "4. Incorrect URL or App Service not running"
          
          # Additional debugging
          echo "Network diagnostics:"
          echo "Current routing table:"
          netstat -rn
          
          exit 1
        fi

    - name: Test VPN Connection (Optional)
      if: ${{ github.event.inputs.test_connection == 'true' && steps.vpn-connect.outputs.vpn_connected == 'true' }}
      run: |
        echo "Running additional VPN connection tests..."
        
        # Test basic connectivity
        echo "Testing basic network connectivity..."
        
        # Test ping to Azure DNS
        echo "Testing ping to Azure DNS (168.63.129.16)..."
        if ping -c 4 168.63.129.16; then
          echo "✅ Azure DNS reachable"
        else
          echo "❌ Azure DNS not reachable"
        fi
        
        # Test connectivity to Azure public endpoints
        echo "Testing connectivity to Azure public endpoints..."
        if curl -s --max-time 10 https://management.azure.com > /dev/null; then
          echo "✅ Azure Management API reachable"
        else
          echo "❌ Azure Management API not reachable"
        fi
        
        # Display VPN statistics if available
        echo "VPN Connection Statistics:"
        if [ -f /var/log/openvpn.log ]; then
          echo "Recent OpenVPN log entries:"
          tail -20 /var/log/openvpn.log
        fi

    - name: Disconnect VPN (Cleanup)
      if: always()
      run: |
        echo "Disconnecting VPN connection..."
        
        # Stop OpenVPN if running
        if [ -f /var/run/openvpn.pid ]; then
          VPN_PID=$(cat /var/run/openvpn.pid)
          if kill -0 $VPN_PID 2>/dev/null; then
            echo "Stopping OpenVPN process (PID: $VPN_PID)..."
            sudo kill $VPN_PID
            sleep 5
            
            # Force kill if still running
            if kill -0 $VPN_PID 2>/dev/null; then
              echo "Force stopping OpenVPN process..."
              sudo kill -9 $VPN_PID
            fi
          fi
          sudo rm -f /var/run/openvpn.pid
        fi
        
        # Clean up any remaining OpenVPN processes
        sudo pkill -f openvpn || true
        
        echo "VPN disconnected"

    - name: Save VPN Configuration Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vpn-configuration
        path: |
          ~/vpn-client.ovpn
          ~/ca.crt
          ~/vpn-certs/
        retention-days: 1

    - name: Display Connection Instructions
      run: |
        echo "=================================="
        echo "VPN Setup Complete!"
        echo "=================================="
        echo ""
        echo "To connect to your Azure VPN:"
        echo "1. Download the 'vpn-configuration' artifact from this workflow run"
        echo "2. Extract the files to a secure location"
        echo "3. Connect using OpenVPN:"
        echo "   sudo openvpn --config vpn-client.ovpn"
        echo ""
        echo "Required secrets for this workflow:"
        echo "- AZURE_CLIENT_ID: Azure service principal client ID"
        echo "- AZURE_TENANT_ID: Azure tenant ID"
        echo "- P2S_CLIENT_CERT: Base64 encoded client certificate (required)"
        echo "- P2S_CLIENT_KEY: Base64 encoded client private key (required)"
        echo ""
        echo "Required inputs for this workflow:"
        echo "- azure_subscription_id: Your Azure subscription ID"
        echo "- resource_group: Resource group containing the VPN Gateway"
        echo "- vpn_gateway_name: Name of your Virtual Network Gateway"
        echo "- private_app_service_url: URL of your private App Service (optional)"
        echo ""
        echo "Prerequisites:"
        echo "- Azure VPN Gateway configured for P2S certificate authentication"
        echo "- Root certificate uploaded to the VPN Gateway"
        echo "- VNet-Gateway.zip uploaded to storage account 'vpnpackageworkflowcenter'"
        echo "- Private App Service configured with VNet integration (if testing connectivity)"
        echo ""
        if [ -n "${{ env.PRIVATE_APP_SERVICE_URL }}" ]; then
          if [ "${{ steps.vpn-connect.outputs.vpn_connected }}" == "true" ]; then
            echo "✅ VPN Connection Status: Connected"
            echo "✅ Private App Service URL: ${{ env.PRIVATE_APP_SERVICE_URL }}"
            echo "✅ VPN IP Address: ${{ steps.vpn-connect.outputs.vpn_ip }}"
          else
            echo "❌ VPN Connection Status: Failed"
          fi
        else
          echo "ℹ️  No private App Service URL provided for testing"
        fi
        echo ""
        echo "Security reminder: The configuration files contain sensitive information."
        echo "Handle them securely and delete them when no longer needed."

    - name: Cleanup Sensitive Files
      if: always()
      run: |
        echo "Cleaning up sensitive files..."
        rm -f ~/vpn-client.ovpn
        rm -f ~/ca.crt
        rm -rf ~/vpn-certs/
        rm -f vpn-client-config.zip
        rm -rf OpenVPN/
        rm -rf Generic/
        
        # Clean up OpenVPN logs and PID files
        sudo rm -f /var/log/openvpn.log
        sudo rm -f /var/run/openvpn.pid
        
        echo "Cleanup completed"
